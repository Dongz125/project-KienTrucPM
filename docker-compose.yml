name: promptpal

# I have no clue what the hell this does
networks:
  rabbitmq_network:
    driver: bridge
  db_network:
    driver: bridge
  api_network:
    driver: bridge

services:
  rabbitmq:
    build: "./message_broker/"
    container_name: "rabbitmq"
    hostname: "rabbitmq"
    networks: [rabbitmq_network]
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    ports:
      - 5552:5552
      - 15672:15672
      - 5672:5672
    volumes:
      - "./volumes/rabbitmq:/var/lib/rabbitmq/mnesia" # Mounts the data so it's not lost after container restarts

  postgres:
    build: "./postgres/"
    container_name: "postgres"
    hostname: "postgres"
    networks: ["db_network"]
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 30s
      timeout: 30s
      retries: 3
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASS}
      POSTGRES_DB: promptpal
    volumes:
      - ./volumes/postgres:/var/lib/postgresql/data
    ports:
      - 5432:5432

  redis:
    image: "redis:8-alpine"
    container_name: "redis"
    hostname: "redis"
    networks: ["db_network"]
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 10s
      timeout: 3s
      retries: 5

  mongo:
    build: ./mongo/
    container_name: "mongo"
    hostname: "mongo"
    networks: ["db_network"]
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootpass
      MONGO_INITDB_DATABASE: promptpal
      MONGO_USER: ${MONGO_USER}
      MONGO_PASS: ${MONGO_PASS}
    healthcheck:
      test:
        [
          "CMD",
          "mongosh",
          "--username",
          "root",
          "--password",
          "rootpass",
          "--eval",
          "db.adminCommand('ping')",
        ]
      interval: 10s
      timeout: 10s
      retries: 5
    volumes:
      - ./volumes/mongo:/data/db
    ports:
      - 27017:27017

  crawler-service:
    build: ./crawler_service/
    container_name: "crawler-service"
    hostname: "crawler-service"
    networks: ["api_network", "rabbitmq_network"]
    healthcheck:
      test: ["CMD-SHELL", "curl http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 10
    ports:
      - 3003:3003
    volumes:
      - ./crawler_service/src:/app/src
    depends_on:
      rabbitmq:
        condition: service_healthy

  backtesting-service:
    build: ./backtesting_service/
    container_name: "backtesting-service"
    hostname: "backtesting-service"
    networks: ["db_network", "api_network", "rabbitmq_network"]
    healthcheck:
      test: ["CMD-SHELL", "curl http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 10
    ports:
      - 3002:3002
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  authentication-service:
    build: ./authentication_service/
    container_name: "authentication-service"
    hostname: "authentication-service"
    networks: ["db_network", "api_network"]
    healthcheck:
      test: ["CMD-SHELL", "curl http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 10
    ports:
      - 3001:3001
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  data-transformation-service:
    build: ./data_transformation_service/
    container_name: "data-transformation-service"
    hostname: "data-transformation-service"
    networks: ["rabbitmq_network", "db_network", "api_network"]
    healthcheck:
      test: ["CMD-SHELL", "curl http://localhost:3000/health"]
      interval: 30s
      timeout: 30s
      retries: 10
    ports:
      - 3000:3000
    volumes:
      - ./data_transformation_service/server.js:/app/server.js # live reload server.js
      - ./data_transformation_service/src:/app/src # live reload
      - ./data_transformation_service/.env:/app/.env # live reload .env file
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy

  frontend:
    build: ./frontend/
    container_name: "frontend"
    hostname: "frontend"
    networks: ["api_network"]
    healthcheck:
      test: ["CMD-SHELL", "curl http://localhost:5173/"]
      interval: 30s
      timeout: 30s
      retries: 3
    ports:
      - 5173:5173
    volumes:
      - ./frontend/public:/app/public
      - ./frontend/.env:/app/.env
      - ./frontend/src:/app/src
      - ./frontend/index.html:/app/index.html

  api-gateway:
    build: ./api_gateway/
    container_name: "api-gateway"
    hostname: "gateway"
    networks: ["api_network"]
    environment:
      JWT_SECRET: ${JWT_SECRET}
      DATA_TRANSFORMATION_SERVICE: ${DATA_TRANSFORMATION_SERVICE}
      AUTHENTICATION_SERVICE: ${AUTHENTICATION_SERVICE}
      BACKTESTING_SERVICE: ${BACKTESTING_SERVICE}
      CRAWLER_SERVICE: ${CRAWLER_SERVICE}
    healthcheck:
      test: ["CMD-SHELL", "curl http://localhost:80/health"]
      interval: 30s
      timeout: 30s
      retries: 10
    ports:
      - 80:80
    volumes:
      - ./api_gateway/src:/app/src
      - ./api_gateway/go.mod:/app/go.mod
    depends_on:
      data-transformation-service:
        condition: service_healthy
      authentication-service:
        condition: service_healthy
      crawler-service:
        condition: service_healthy
